---

# Alpine linux kubernetes Longhorn storage
# configuring requirements:
# https://longhorn.io/docs/1.8.0/deploy/install/#installation-requirements

- name: Test connection with ping
  ansible.builtin.ping:

- name: Install open-iscsi,lsblk,findmnt,blkid,nfs-utils,jq,helm,py3-setuptools,py3-pip,wireguard-tools,py3-yaml packages
  community.general.apk:
    name: open-iscsi,lsblk,findmnt,blkid,nfs-utils,jq,helm,py3-setuptools,py3-pip,wireguard-tools,py3-yaml
    state: present

- name: Set local.d script to 'mount --make-rshared /'
  copy:
    dest: /etc/local.d/mount-make-rshared.start
    owner: root
    group: root
    mode: '0751'
    content: |
      #!/bin/bash
      /bin/mount --make-rshared /

- name: Execute /bin/mount --make-rshared /
  ansible.builtin.command: /bin/mount --make-rshared /

- name: Enable and start service iscsid
  ansible.builtin.service:
    name: iscsid
    enabled: yes
    state: started

#- name: Install pyyaml python package
#  ansible.builtin.pip:
#    name: pyyaml

- name: Run kubectl label nodes storage1 storage2 storage3 ... storage9 node.longhorn.io/create-default-disk=true
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml label nodes storage1 storage2 storage3 storage4 storage5 storage6 storage7 storage8 storage9 node.longhorn.io/create-default-disk=true
  register: kubectl_label_output
  when: inventory_hostname in groups.control1

- name: Print kubectl label nodes storage1 storage2 storage3 ... storage9 node.longhorn.io/create-default-disk=true output
  ansible.builtin.debug:
    var: kubectl_label_output.stdout_lines
  when: inventory_hostname in groups.control1

- name: Add the Longhorn Helm charts repository on control1
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: https://charts.longhorn.io
  when: inventory_hostname in groups.control1

- name: Copy files/longhorn_values.yaml to /home/p/longhorn_values.yaml
  copy:
    src:  files/longhorn_values.yaml
    dest: /home/p/longhorn_values.yaml
    owner: root
    group: root
    mode: '0640'
  when: inventory_hostname in groups.control1

- name: Deploy Longhorn Helm chart v1.8.1 with values loaded from template
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    chart_version: 1.8.1
    create_namespace: true
    release_namespace: longhorn-system
    wait: true
    update_repo_cache: true
    values_files:
      - /home/p/longhorn_values.yaml
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  when: inventory_hostname in groups.control1

- name: Get kubectl get no
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get no -owide
  register: kubectl_getno_output
  when: inventory_hostname in groups.control1

- name: Print kubectl get no output
  ansible.builtin.debug:
    var: kubectl_getno_output.stdout_lines
  when: inventory_hostname in groups.control1

- name: Get kubectl get pod --all-namespaces
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get pod --all-namespaces -owide
  register: get_pods
  when: inventory_hostname in groups.control1

- name: Print kubectl get po --all-namespaces output
  ansible.builtin.debug:
    var: get_pods.stdout_lines
  when: inventory_hostname in groups.control1

- name: Pause for 60 seconds
  ansible.builtin.pause:
    seconds: 60

- name: Get kubectl get pod --all-namespaces
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get pod --all-namespaces -owide
  register: get_pods
  when: inventory_hostname in groups.control1

- name: Print kubectl get po --all-namespaces output
  ansible.builtin.debug:
    var: get_pods.stdout_lines
  when: inventory_hostname in groups.control1

- name: Pause for 60 seconds
  ansible.builtin.pause:
    seconds: 60

- name: Get kubectl get pod --all-namespaces
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get pod --all-namespaces -owide
  register: get_pods
  when: inventory_hostname in groups.control1

- name: Print kubectl get po --all-namespaces output
  ansible.builtin.debug:
    var: get_pods.stdout_lines
  when: inventory_hostname in groups.control1

- name: Pause for 60 seconds
  ansible.builtin.pause:
    seconds: 60

- name: Get kubectl get pod --all-namespaces
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get pod --all-namespaces -owide
  register: get_pods
  when: inventory_hostname in groups.control1

- name: Print kubectl get po --all-namespaces output
  ansible.builtin.debug:
    var: get_pods.stdout_lines
  when: inventory_hostname in groups.control1

- name: Get kubectl get all -n longhorn-system
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get all -n longhorn-system -owide
  register: get_all
  when: inventory_hostname in groups.control1

- name: Print kubectl get all -n longhorn-system output
  ansible.builtin.debug:
    var: get_all.stdout_lines
  when: inventory_hostname in groups.control1

- name: Set local-path storageclass non-default
  ansible.builtin.command:
    cmd: |
      /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
  register: default_storageclass
  when: inventory_hostname in groups.control1

- name: Print kubectl get set local-path storageclass non-default output
  ansible.builtin.debug:
    var: default_storageclass.stdout_lines
  when: inventory_hostname in groups.control1

- name: Get kubectl get storageclass
  ansible.builtin.command:
    cmd: /usr/bin/kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get storageclass
  register: get_storageclass
  when: inventory_hostname in groups.control1

- name: Print kubectl get storageclass output
  ansible.builtin.debug:
    var: get_storageclass.stdout_lines
  when: inventory_hostname in groups.control1
